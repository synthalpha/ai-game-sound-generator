services:
  # FastAPI サービス
  api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_ENV: ${DOCKER_ENV:-production}
    container_name: ai-sound-api
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - ./src:/app/src:cached
      - ./.env:/app/.env:ro
      - ./output:/app/output
    environment:
      - PYTHONPATH=/app
      - SERVICE_TYPE=api
      - DOCKER_ENV=${DOCKER_ENV:-production}
    env_file:
      - .env
    networks:
      - ai-sound-network
    restart: ${DOCKER_RESTART_POLICY:-unless-stopped}

  # FastAPI Web サービス
  web:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_ENV: ${DOCKER_ENV:-production}
    container_name: ai-sound-web
    ports:
      - "${WEB_PORT:-8001}:8001"
    volumes:
      - ./src:/app/src:cached
      - ./.env:/app/.env:ro
      - ./output:/app/output
    environment:
      - PYTHONPATH=/app
      - SERVICE_TYPE=web
      - DOCKER_ENV=${DOCKER_ENV:-production}
    env_file:
      - .env
    networks:
      - ai-sound-network
    restart: ${DOCKER_RESTART_POLICY:-unless-stopped}
    command: uvicorn src.app.web_app:app --host 0.0.0.0 --port 8001 --reload

  # PostgreSQL データベース（将来用）
  # db:
  #   image: postgres:16-alpine
  #   container_name: ai-sound-db
  #   ports:
  #     - "${DB_PORT:-5432}:5432"
  #   environment:
  #     - POSTGRES_USER=${DB_USER:-aiuser}
  #     - POSTGRES_PASSWORD=${DB_PASSWORD:-aipass}
  #     - POSTGRES_DB=${DB_NAME:-aigamesound}
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   networks:
  #     - ai-sound-network
  #   restart: ${DOCKER_RESTART_POLICY:-unless-stopped}

  # Redis キャッシュ（将来用）
  # redis:
  #   image: redis:7-alpine
  #   container_name: ai-sound-redis
  #   ports:
  #     - "${REDIS_PORT:-6379}:6379"
  #   command: redis-server --appendonly yes
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - ai-sound-network
  #   restart: ${DOCKER_RESTART_POLICY:-unless-stopped}

networks:
  ai-sound-network:
    driver: bridge

# volumes:
#   postgres_data:
#   redis_data: