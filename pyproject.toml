[project]
name = "ai-game-sound-generator"
version = "0.1.0"
description = "AI-powered game audio generation service for Tokyo Game Show 2025"
authors = [
    { name = "Minato Igarashi", email = "minatoigarashi@example.com" }
]
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "fastapi>=0.116.0",
    "uvicorn[standard]>=0.32.0",
    "pydantic>=2.10.0",
    "pydantic-settings>=2.6.0",
    "httpx>=0.28.0",
    "python-dotenv>=1.0.0",
    "dependency-injector>=4.43.0",
    "structlog>=24.6.0",
    "cryptography>=45.0.6",
    "elevenlabs>=2.12.1",
    "pydub>=0.25.1",
    "jinja2>=3.1.0",
    "python-multipart>=0.0.20",
    "aiohttp>=3.10.0",
    "psutil>=6.0.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "asyncpg>=0.29.0",
    "aiosqlite>=0.20.0",
    "greenlet>=3.0.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.8.0",
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
]

[tool.ruff]
line-length = 100
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "B024",  # abstract base class without abstract methods (design choice)
    "UP046", # Generic syntax (we use traditional Generic for clarity)
    "UP040", # TypeAlias syntax (we use traditional TypeAlias for clarity)
    "UP047", # Generic function syntax (we use traditional syntax)
    "UP038", # isinstance with union (we use tuple for clarity)
]

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]
pythonpath = ["."]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-ra -q --strict-markers --cov=src --cov-report=term-missing --cov-report=html"
asyncio_mode = "auto"
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "performance: marks tests as performance tests (deselect with '-m \"not performance\"')",
]

[tool.coverage.run]
branch = true
source = ["src"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]

[dependency-groups]
dev = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "mypy>=1.11.0",
    "types-python-dateutil>=2.9.0",
]

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
namespace_packages = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "dependency_injector.*",
    "structlog.*",
]
ignore_missing_imports = true
